const { fifaData } = require('./fifa.js')


/* GÃ¶rev 1: 
	Verilen datayÄ± parÃ§alayarak aÅŸaÄŸÄ±daki verileri (console.log-ing) elde ederek pratik yapÄ±n. 
	
	ðŸ’¡ Ä°PUCU: Ã–ncelikle datayÄ± filtrelemek isteyebilirsiniz */

//(a) 2014 DÃ¼nya kupasÄ± Finali Evsahibi takÄ±m ismi (dizide "Home Team Name" anahtarÄ±)
const fifa2014 = fifaData.filter((evSahibi) => {return evSahibi.Year === 2014 && evSahibi.Stage === "Final" });
console.log(fifa2014);
console.log("fifa2014 Home Team Name:",fifa2014[0]['Home Team Name']);
//(b) 2014 DÃ¼nya kupasÄ± Finali Deplasman takÄ±m ismi  (dizide "Away Team Name" anahtarÄ±)
console.log("fifa2014 Away Team Name:",fifa2014[0]['Away Team Name']);
//(c) 2014 DÃ¼nya kupasÄ± finali Ev sahibi takÄ±m golleri (dizide "Home Team Goals" anahtarÄ±)
console.log("fifa2014 Home Team Goals:",fifa2014[0]['Home Team Goals']);
//(d)2014 DÃ¼nya kupasÄ± finali Deplasman takÄ±m golleri  (dizide "Away Team Goals" anahtarÄ±)
console.log("fifa2014 Away Team Goals:",fifa2014[0]['Away Team Goals']);
//(e) 2014 DÃ¼nya kupasÄ± finali kazananÄ±*/
if(fifa2014[0]['Home Team Goals'] > fifa2014[0]['Away Team Goals']){
	console.log(fifa2014[0]['Home Team Name']);
}else{
	console.log(fifa2014[0]['Away Team Name']);
}


/*  GÃ¶rev 2: 
	Finaller adlÄ± fonksiyonu kullanarak aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. Bir dizi(array) olan Fifa datasÄ±nÄ± fonksiyonun birinci parametresi olarak alacak
	2. Sadece final maÃ§larÄ±nÄ± iÃ§eren nesnenin(object) datalarÄ±nÄ± filtreleyerek, bir dizi olarak dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU - verilen data iÃ§indeki nesnelerin(objects) "Stage" anahtarÄ±na bakmalÄ±sÄ±nÄ±z
*/

function Finaller(dizi) {

	/*//eleman burada parametre, anonim arrow (=>) function kullandÄ±m 

	const finaller = dizi.filter((eleman) => {return eleman.Stage === "Final"} );

	return finaller;*/

	return dizi.filter((eleman) => eleman.Stage === "Final" );


	/*const finaller = [];

	for(let i = 0; i<dizi.length; i++){
		if(dizi[i].Stage === "Final"){
			finaller.push(dizi[i]);
		}
	}
	
    return finaller;*/
}

console.log(Finaller(fifaData));

/*  GÃ¶rev 3: 
	Bir higher-order fonksiyonu olan Yillar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. fifaData dizisini(array) fonksiyonun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Finaller data setindeki tÃ¼m yÄ±llarÄ± iÃ§eren "years" adÄ±ndaki diziyi(array) dÃ¶ndÃ¼recek
	*/

function Yillar(dizi,finalCB) {

	const years = finalCB(dizi).map((eleman) => eleman.Year)

	return years

}

console.log(Yillar(fifaData,Finaller));

/*  GÃ¶rev 4: 
	Bir higher-order fonksiyonunu olan Kazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:  
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Her final maÃ§Ä±nÄ±n kazananÄ±nÄ± (evsahibi ya da deplasman) belirleyecek
	ðŸ’¡ Ä°PUCU: Beraberlikler(ties) iÃ§in ÅŸimdilik endiÅŸelenmeyin (DetaylÄ± bilgi iÃ§in README dosyasÄ±na bakabilirsiniz.)
	4. TÃ¼m kazanan Ã¼lkelerin isimlerini iÃ§eren `kazananlar` adÄ±nda bir dizi(array) dÃ¶ndÃ¼recek(return)  */ 

function Kazananlar(dizi,finalFn) {
	
    const finalMaclar = finalFn(dizi);
	const kazananlar = finalMaclar.map((eleman)=>{
		if(eleman['Home Team Goals'] > eleman['Away Team Goals']){
			return eleman['Home Team Name'];
		}else{
			return eleman['Away Team Name'];
		}
	}); 
	
	return kazananlar;
}

Kazananlar(fifaData,Finaller);

/*  GÃ¶rev 5: 
	Bir higher-order fonksiyonu olan YillaraGoreKazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. GÃ¶rev 3'de yazdÄ±ÄŸÄ±nÄ±z Yillar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun Ã¼Ã§Ã¼ncÃ¼ parametresi olarak alacak
	4. GÃ¶rev 4'de yazdÄ±ÄŸÄ±nÄ±z Kazananlar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun dÃ¶rdÃ¼ncÃ¼ parametresi olarak alacak
	5. Her yÄ±l iÃ§in "{yÄ±l} yÄ±lÄ±nda, {Ã¼lke} dÃ¼nya kupasÄ±nÄ± kazandÄ±!" cÃ¼mlesini(string) iÃ§eren bir diziyi(array) dÃ¶ndÃ¼recek
	
	ðŸ’¡ Ä°PUCU: her cÃ¼mlenin adÄ±m 4'te belirtilen cÃ¼mleyle birebir aynÄ± olmasÄ± gerekmektedir.
*/

function YillaraGoreKazananlar(dizi,final,yil,kazanan) {
	const finalMaclar = final(dizi);
	const yillarDizisi = yil(finalMaclar,final);
	const kazananlar = kazanan(finalMaclar,final);

	const sonuclarMetin = finalMaclar.map((eleman,index)=>{
		return  yillarDizisi[index] + " yÄ±lÄ±nda, "+ kazananlar[index] + " dÃ¼nya kupasÄ±nÄ± kazandÄ±!";
	})
	return sonuclarMetin;
}

YillaraGoreKazananlar(fifaData,Finaller,Yillar,Kazananlar)

/*  GÃ¶rev 6: 
	Bir higher order fonksiyonu olan `OrtalamaGolSayisi` isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z `Finaller` fonksiyonunu birinci parametre olarak alacak; 'fifaData' dizisini argÃ¼man olarak eklediÄŸinizden emin olun
	
	ðŸ’¡ Ä°PUCU: Ã‡aÄŸÄ±rma Ã¶rneÄŸi: `OrtalamaGolSayisi(Finaller(fifaData));`
	
	2. Her maÃ§ iÃ§in Ortalama toplam evsahibi gol sayÄ±sÄ± ve toplam deplasman gol sayÄ±sÄ±nÄ± hesaplayacak (her maÃ§ta atÄ±lan toplam gol sayÄ±sÄ±)
	
	3. Sonucun 2. ondalÄ±ÄŸÄ±nÄ± yuvarlayÄ±p, bulunan deÄŸeri dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU: .reduce, .toFixed (dizilim(syntax) iÃ§in MDN'ye bakÄ±n) kullan, ve bunu 2 adÄ±mda yapÄ±n) 
	
*/

function OrtalamaGolSayisi(final) {
	
    const macBasiToplamGol = final.map((mac) => {
		return mac["Home Team Goals"] + mac["Away Team Goals"]
	});

	const toplamGol = macBasiToplamGol.reduce((toplam,gol) => {
		return toplam + gol;
	},0);
	
	return (toplamGol/macBasiToplamGol.length).toFixed(2);
}

OrtalamaGolSayisi(Finaller(fifaData));

/// EKSTRA Ã‡ALIÅžMALAR ///

/*  BONUS 1:  
	`UlkelerinKazanmaSayilari` isminde bir fonksiyon oluÅŸturun, parametre olarak `data` ve `takÄ±m kÄ±saltmalarÄ±nÄ±` alacak ve hangi Ã¼lkenin kaÃ§ dÃ¼nya kupasÄ± olduÄŸunu dÃ¶ndÃ¼recek
	
	Ä°pucu: "takÄ±m kÄ±saltmalarÄ±" (team initials) iÃ§in datada araÅŸtÄ±rma yapÄ±n!
Ä°pucu: `.reduce` KullanÄ±n*/

function UlkelerinKazanmaSayilari(dizi,kisaltma) {

	/*let count = 0;
	
    const kupaSayisi = dizi.reduce((eleman,kupa) => {
		if(eleman['Home Team Initials'] === kisaltma && eleman.Stage === "Final"){
			kupa = count++;
			return kupa;
		}
		else if(eleman['Away Team Initials'] === kisaltma && eleman.Stage === "Final"){
			kupa = count++;
			return kupa;
		}
	});

	console.log("kupa sayÄ±sÄ±",kupaSayisi); */

	//return  kupaSayisi + "dÃ¼nya kupasÄ± var "
	
}

UlkelerinKazanmaSayilari(fifaData,"ITA");

/*  BONUS 2:  
EnCokGolAtan() isminde bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ± finallerinde en Ã§ok gol atan takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n */

function EnCokGolAtan(dizi) {
	
    const finaller = dizi.filter((evSahibi) => {return evSahibi.Stage === "Final" });
	const enCokGolAtan = finaller.map((eleman) => {
		if(eleman["Home Team Goals"] > eleman["Away Team Goals"]){
			return eleman["Home Team Name"]
		}else{
			return eleman["Away Team Name"]
		}
	});

	console.log("en Ã§ok gol atan", enCokGolAtan[0]);

	return enCokGolAtan[0]
}
EnCokGolAtan(fifaData);

/*  BONUS 3: 
EnKotuDefans() adÄ±nda bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ±nda finallerinde en Ã§ok golÃ¼ yiyen takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n*/

function EnKotuDefans(dizi) {
	
    const finaller = dizi.filter((evSahibi) => {return evSahibi.Stage === "Final" });
	const enCokGolYiyen = finaller.map((eleman) => {
		if(eleman["Home Team Goals"] < eleman["Away Team Goals"]){
			return eleman["Home Team Name"]
		}else{
			return eleman["Away Team Name"]
		}
	});

	console.log("en Ã§ok gol yiyen", enCokGolYiyen);

	return enCokGolYiyen[0]
	
}
EnKotuDefans(fifaData);

/* Hala vaktiniz varsa, README dosyasÄ±nda listelenen hedeflerden istediÄŸinizi aÅŸaÄŸÄ±daki boÅŸluÄŸa yazabilirsiniz. */


/* Bu satÄ±rÄ±n aÅŸaÄŸÄ±sÄ±ndaki kodlarÄ± lÃ¼tfen deÄŸiÅŸtirmeyin */
function sa(){
    console.log('Kodlar Ã§alÄ±ÅŸÄ±yor');
    return 'as';
}
sa();
module.exports = {
    sa,
    Finaller,
    Yillar,
    Kazananlar,
    YillaraGoreKazananlar,
    OrtalamaGolSayisi
}
